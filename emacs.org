#+TITLE: Emacs config
#+AUTHOR: Bence Fabian
#+options: ':t ^:nil
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes

* Packages
Disclaimer about editing the configuration.
#+BEGIN_SRC emacs-lisp
  ;;;; init. el
  ;;;;
  ;;;; This is a generated file. DO NOT EDIT IT.
  ;;;; Edit `emacs.org' and use `org-babel-tangle'
  ;;;; The default hotkey is C-c C-v t
#+END_SRC
** Environment optimalization
Relax the =GC= treshold.
#+begin_src emacs-lisp
  (setq init/old-gc-treshold gc-cons-threshold
        gc-cons-threshold most-positive-fixnum)
#+end_src
** Set up package repositories
- Require the functions to handle packages
- Add repos to make available all packages
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (let ((archives '(("melpa"     . "http://melpa.org/packages/")
                    ("gnu"       . "http://elpa.gnu.org/packages/")
                    ("nongnu"    . "http://elpa.nongnu.org/nongnu/"))))
    (dolist (archive archives)
      (add-to-list 'package-archives archive)))
  (package-initialize)
#+END_SRC
** Set up use-package
If not installed yet, then install ~use-package~.
This is useful when migrating to a new computer.
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC
Require it only for expansion time.
Bind-key will be used in package configs.
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (require 'use-package))
  (require 'bind-key)
#+END_SRC
* General
Mostly lifted from the better defaults package unless otherwise stated.
** UI
Disable menu, toolbar and scrollbars.
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
  (when (fboundp 'horizontal-scroll-bar-mode)
    (horizontal-scroll-bar-mode -1))
#+END_SRC
Don't use the bell, thank you.
#+BEGIN_SRC emacs-lisp
  (setq visible-bell nil
        ring-bell-function 'ignore)
#+END_SRC
Play nice with system clipboard.
#+BEGIN_SRC emacs-lisp
  (setq save-interprogram-paste-before-kill t
        mouse-yank-at-point t
        x-select-request-type 'text/plain\;charset=utf-8)
#+END_SRC
Show matching parens
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC
Don't create new frame for =ediff=
#+BEGIN_SRC emacs-lisp
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+END_SRC
Change yes/no prompts to y/n prompts
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
Enable narrowing
#+BEGIN_SRC emacs-lisp
  (put 'narrow-to-region 'disabled nil)
#+END_SRC
*** Moving around
Use =ace-window= for window navigation instead of =other-window=.
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :bind (("C-x o" . ace-window)))
#+END_SRC
Use =avy= to move around.  Use =M-g= as a leader which already has
=goto-line= and =goto-char=.
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind (;; Word jumping
           ("M-g w" . avy-goto-word-1)
           ("M-g M-b" . avy-goto-word-1-above)
           ("M-g M-f" . avy-goto-word-1-below)
           ;; Line jumping
           ("M-g l" . avy-goto-line)))
#+END_SRC
*** Completion
Use ivy/swiper/counsel for completion

Use ivy for autocompletion of symbols.
Use the minibuffer for autocompletion.
#+BEGIN_SRC emacs-lisp :noweb yes
  (use-package counsel
    :ensure t
    :commands (ivy-completing-read ivy-completion-in-region)
    :bind (
           <<bindings>>
           )
    :init
    (setq completing-read-function 'ivy-completing-read
          ;; next line deletes
          ;; '(ivy-completion-in-region . ivy-display-function-overlay)
          ;; which would do autocompletion at point
          ivy-display-functions-alist '((t . nil))
          completion-in-region-function 'ivy-completion-in-region))
#+END_SRC
Replace =isearch= with =swiper=
#+BEGIN_SRC emacs-lisp :noweb-ref bindings :tangle no
  ("C-s" . swiper)
#+END_SRC
Use the counsel version of =M-x=
#+BEGIN_SRC emacs-lisp :noweb-ref bindings :tangle no
  ("M-x" . counsel-M-x)
#+END_SRC
Use counsel for file and buffer search
#+BEGIN_SRC emacs-lisp :noweb-ref bindings :tangle no
  ("C-x C-f" . counsel-find-file)
  ("C-x b"   . ivy-switch-buffer)
#+END_SRC
Use counsel for help functionality
#+BEGIN_SRC emacs-lisp :noweb-ref bindings :tangle no
  ("C-h f" . counsel-describe-function)
  ("C-h v" . counsel-describe-variable)
#+END_SRC
Use counsel for entering unicode glyphs
#+BEGIN_SRC emacs-lisp :noweb-ref bindings :tangle no
  ("C-c u" . counsel-unicode-char)
#+END_SRC
Use ivy-hydra for different actions with =C-o=
#+BEGIN_SRC emacs-lisp
  (use-package ivy-hydra
    :ensure t
    :commands hydra-ivy/body)
#+END_SRC
** Editing
Indent with spaces.
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC
Require newline at end of file.
#+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
#+END_SRC
Delete trailing whitespace before saving.
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook #'delete-trailing-whitespace)
#+END_SRC
Don't create lock files.  I never needed it and it drives the nodejs file watcher crazy.
#+begin_src emacs-lisp
  (setq create-lockfiles nil)
#+end_src
*** Default multi-language input method
Most of the time it is the easter european input for Hungarian / Polish.

Other ones still can be chosen with a universal argument (=C-u=).
#+BEGIN_SRC emacs-lisp
  (setq default-input-method "latin-2-alt-postfix")
#+END_SRC
*** Grep
    Use the WGrep package to be able to edit multiple files at once.
    A tipical case is editing _Ivy occur_ buffers.

    #+BEGIN_SRC emacs-lisp
      (use-package wgrep
        :ensure t
        :commands wgrep-change-to-wgrep-mode)
    #+END_SRC

    Use =ripgrep= for ~grep-find~ command.
    #+begin_src emacs-lisp
      ;;;; TODO: instead of doing this it might be more optimal to do an
      ;;;; advice aroung `grep-find'.
      (require 'grep)

      (grep-apply-setting
       'grep-find-command
       (let ((starting-cursor-offset 27)
             (command "rg -n -H --no-heading -e '' $(git rev-parse --show-toplevel || pwd)"))
         `(,command . ,starting-cursor-offset)))
    #+end_src

    *TODO*:
    - [ ] Calculate the offset.
    - [ ] Check for availability of the =rg= executable.
*** Multiple cursors
Possibly use multiple cursors for editing.
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :bind (("C-c m a" . mc/mark-all-dwim)                ;; All
           ("C-c m b" . mc/edit-beginnings-of-lines)     ;; Beginning
           ("C-c m e" . mc/edit-ends-of-lines)           ;; End
           ("C-c m m" . mc/mark-more-like-this-extended) ;; More
           ("C-c m n" . mc/insert-numbers)               ;; Numbers
           ))
#+END_SRC
*** Underlining headings
Functions for writing undelinings symbols for section headings in text files.

Code lifted from [[https://www.emacswiki.org/emacs/UnderlineWith][emacs wiki]] originally by user [[https://www.emacswiki.org/emacs/KragenJavierSitaker][KragenJavierSitaker]].

#+begin_src emacs-lisp
  (defun my/underline-line-with (char)
    (save-excursion
      (let ((length (- (line-end-position) (line-beginning-position))))
        (end-of-line)
        (insert "\n")
        (insert (make-string length char)))))

  (defun my/underline-with-dash ()
    (interactive)
    (my/underline-line-with ?-))

  (defun my/underline-with-equal ()
    (interactive)
    (my/underline-line-with ?=))

  (defun my/underline-with-degree ()
    (interactive)
    (my/underline-line-with ?Â°))

  (bind-keys
   :prefix "C-c _"
   :prefix-map my/underline-prefix-map
   ("-" . my/underline-with-dash)
   ("=" . my/underline-with-equal)
   ("o" . my/underline-with-degree))
#+end_src
*** Chromium edit with emacs
Set up the emacs side of the [[https://github.com/stsquad/emacs_chrome][Edit with emacs]] chrome/ium plugin.

Add to emacs search path.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/lib/emacs/")
#+END_SRC
If emacs is running in daemon mode and the library is downloaded,
then start the edit server.
#+BEGIN_SRC emacs-lisp
  (when (and (daemonp) (locate-library "edit-server"))
    (require 'edit-server)
    (edit-server-start))
#+END_SRC
** File handling
*** Dired
Enable changing the buffer to the visited file by pressing =a=.
#+BEGIN_SRC emacs-lisp
  (put 'dired-find-alternate-file 'disabled nil)
#+END_SRC
Move files to trash on deletion
#+BEGIN_SRC emacs-lisp
  (setq delete-by-moving-to-trash t)
#+END_SRC
Install =trashed= to manage the contents of the trash from emacs.
#+begin_src emacs-lisp
  (use-package trashed
    :ensure t
    :commands trashed)
#+end_src
Bind =C-x C-d= to =dired= instead of =list-directory=.
#+BEGIN_SRC emacs-lisp
  (bind-key (kbd "C-x C-d") #'dired)
#+END_SRC
Enable multi-panel file operations by turning on "Do what I mean"
mode.
#+BEGIN_SRC emacs-lisp
  (setq dired-dwim-target t)
#+END_SRC
*** TRAMP
Make =ssh= the default connection method.
#+BEGIN_SRC emacs-lisp
  (setq tramp-default-method "ssh")
#+END_SRC
** Backup Directory
Snippets taken from https://www.emacswiki.org/emacs/BackupDirectory

Define a dir where emacs can put all the backups
#+BEGIN_SRC emacs-lisp  :noweb tangle
  (eval-when-compile
    (require 'cl-lib))

  (let ((backup-dir "~/.backups/"))
    <<set-up-backups>>
    <<set-up-autosave>>
    <<clean-up-backups>>)
#+END_SRC
*** Set up backups
- Backup by copying
- Don't backup TRAMP files
- keep 6 of the newest versions
- keep 2 of the oldest versions
#+BEGIN_SRC emacs-lisp :noweb-ref set-up-backups :tangle no
  (setq backup-by-copying t
        backup-directory-alist `((,tramp-file-name-regexp . nil)
                                 ("."                     . ,backup-dir))
        delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)
#+END_SRC
*** Clean up backups
Clean any backup that is older than a week
#+BEGIN_SRC emacs-lisp :noweb-ref clean-up-backups :tangle no
  (message "Deleting old backup files...")
  (let ((week (* 60 60 24 7))
        (current (float-time (current-time))))
    (cl-dolist (file (directory-files backup-dir t))
      (when (and (backup-file-name-p file)
                 (> (- current (float-time (cl-fifth (file-attributes file))))
                    week))
        (message "%s" file)
        (delete-file file))))
#+END_SRC
*** Auto-save files
Save the auto-saves there too.
#+BEGIN_SRC emacs-lisp :noweb-ref set-up-autosave :tangle no
  (setq auto-save-file-name-transforms
        `((".*" ,backup-dir t)))
  (setq auto-save-list-file-prefix
        backup-dir)
#+END_SRC
* Org
Use htmlize to add syntax highlighting to org exported code blocks.
Load it when ~htmlize-region~ is used as this is the function
which is called ~org~'s =HTML= export.
#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    :ensure t
    :commands htmlize-region)
#+END_SRC
** Org Contrib
Use org contrib packages.
Load the groff exporter
#+BEGIN_SRC emacs-lisp
  (use-package org-contrib
    :ensure t
    :config
    (require 'ox-groff)
    :after org)
#+END_SRC
** Markdown export
Make the markdown export use the backtick syntax for exporting code
blocks.  The deault one exports only with indentation.

Using the backtick syntax makes it possible to syntax highlight
code blocks properly.

Create a function to export with the backtick rule.
#+BEGIN_SRC emacs-lisp
  (defun my/md-backtick-src-block (src-block contents info)
    "Print code blocks with the backtick syntax so they can be
  highlighted appropriately.  The CONTENTS parameter is empty."
    (format (concat "```%s\n"
                    "%s"
                    "```\n")
            (org-element-property :language src-block)
            (org-remove-indentation
             (org-export-format-code-default src-block info))))
#+END_SRC
Register the new export mode which uses our function.  Derive it
from the default markdown mode =md=.
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure nil
    :defer t
    :init
    (autoload #'org-export-define-derived-backend "ox")
    :config
    (progn
      (require 'ox-md)
      (require 'org-tempo)
      (org-export-define-derived-backend
       'md-backtick 'md
       :translate-alist '((src-block . my/md-backtick-src-block)))))
#+END_SRC
Create an interactive function so we can use our new export
functionality from the =M-x= menu or from a key binding.
#+BEGIN_SRC emacs-lisp
  (defun org-export-md-backtick-to-buffer ()
      "Export the current org mode buffer as Markdown with code
  blocks exported with the backtick syntax."
    (interactive)
    (org-export-to-buffer 'md-backtick "*MD Bactick Export*"))
#+END_SRC
* Git
Install magit and set =C-c g= to =magit-status=
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-c g" . magit-status)
           ("C-c b" . magit-blame)))
#+END_SRC
* Programming
** TODO Workarounds
Needed for ~lsp-java~ to not get "Wrong type argument"
#+begin_src emacs-lisp
  (setq-default c-basic-offset 4)
#+end_src
** Haskell
Install haskell-mode
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :ensure t
    :mode "\\.hs\\'")
#+END_SRC
** OCaml
Use =tuareg= mode for OCaml files.
#+BEGIN_SRC emacs-lisp
  (use-package tuareg
    :ensure t
    :mode ("\\.ml[yli]?\\'" . tuareg-mode))
#+END_SRC
Use =utop= for having a toplevel.  Bind ~Meta+Tab~ to completion to be
consistent with other modes.
#+BEGIN_SRC emacs-lisp
  (use-package utop
    :ensure t
    :bind (:map utop-mode-map
                ("C-M-i" . utop-complete)))
#+END_SRC
** .Net
Add F# mode.
#+BEGIN_SRC emacs-lisp
  (use-package fsharp-mode
    :ensure t
    :mode "\\.fs\\'"
    :config
    (setq lsp-fsharp-use-dotnet-tool-for-fsac nil
          lsp-fsharp-external-autocomplete t))
#+END_SRC
C# mode is part of emacs starting with version 29
so only add them on earlier versions.
#+begin_src emacs-lisp
  (when (< emacs-major-version 29)
    (use-package csharp-mode :ensure t))
#+end_src
** ReScript
Add rescript mode for editing rescript files.

#+BEGIN_SRC emacs-lisp
  (use-package rescript-mode
    :ensure t
    :mode "\\.res\\'")
#+END_SRC
** Scala
Use =sbt= for building.
#+BEGIN_SRC emacs-lisp
  (use-package sbt-mode
    :ensure t
    :commands sbt-start sbt-hydra
    :config
    (setq sbt:program-options '("-Dsbt.supershell=false")))
#+END_SRC
Add =scala-mode= and set up using the sbt hydra.
#+BEGIN_SRC emacs-lisp
  (use-package scala-mode
    :ensure t
    :interpreter ("scala" . scala-mode)
    :bind (:map scala-mode-map
           ("C-c C-c" . sbt-hydra)))
#+END_SRC
** Erlang
Add erlang mode for erlang and erlang header files
#+begin_src emacs-lisp
  (use-package erlang
    :ensure t
    :mode ("\\.[eh]rl\\'" . erlang-mode))
#+end_src
** Lisp
Will need paredit for all lisps.
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t
    :mode ((rx "dune" (? "-project") eos) . paredit-mode)
    :commands enable-paredit-mode
    :init
    (let ((lisp-mode-hooks '(emacs-lisp-mode-hook
                             lisp-mode-hook
                             clojure-mode-hook
                             cider-repl-mode-hook
                             ;; racket-mode-hook
                             scheme-mode-hook
                             slime-repl-mode-hook
                             ;; This stopped working
                             ;; eval-expression-minibuffer-setup-hook
                             lisp-interaction-mode)))
      (dolist (mode-hook lisp-mode-hooks)
        (add-hook mode-hook 'paredit-mode))))
#+END_SRC
Add smart parens mode for minibuffer evaluation
#+begin_src emacs-lisp
  (add-hook 'eval-expression-minibuffer-setup-hook 'smartparens-mode)
#+end_src
*** Emacs lisp
Reazon (a [[http://minikanren.org/][miniKanren]] for Emacs lisp) for logic programming.
#+begin_src emacs-lisp
  (use-package reazon
    :ensure t
    ;; will always require it before use
    :defer t)
#+end_src
*** Common Lisp
Set up slime for interactive editing.
#+BEGIN_SRC emacs-lisp
  (use-package slime
    :ensure t
    :commands inferior-slime-mode
    :init
    (setq inferior-lisp-program "sbcl"
          slime-contribs        '(slime-fancy))
    :config
    (add-hook 'inferior-lisp-mode-hook
              #'(lambda () (inferior-slime-mode t))))
#+END_SRC
*** Clojure
Install clojure mode for editing clojure and boot files
#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :ensure t
    :commands (clojure-mode clojurescript-mode)
    :config
    (let ((associations '(("\\.\\(clj\\|boot\\)\\'" . clojure-mode)
                          ("\\.cljs\\'"       . clojurescript-mode))))
      (dolist (association associations)
        (add-to-list 'auto-mode-alist association))))
#+END_SRC
Install cider for interactive development.
#+BEGIN_SRC emacs-lisp
  (use-package cider
    :commands cider-jack-in
    :ensure t)
#+END_SRC
** C-like languages
Use smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :commands smartparens-mode
    :init
    (add-hook 'c-mode-common-hook #'smartparens-mode))
#+END_SRC
Use yasnippet for c-like langs.

If the tables are not loaded then load them.
#+BEGIN_SRC emacs-lisp
  (defvar *snippet-tables-loaded-p*
    nil
    "`nil' if the yas tables have not been loaded yet.")

  (defun load-snippets ()
    "Load yas minor mode. If the snippet tables have not yet been
  loaded then load them."
    (unless *snippet-tables-loaded-p*
      (yas-reload-all)
      (setq *snippet-tables-loaded-p* t))
    (yas-minor-mode-on))
#+END_SRC
Add the package and hook.

=lsp= mode needs =yas= for autocomletion of functions.
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet-snippets
    :ensure t
    :commands yas-reload-all
    :hook ((c-mode-common . load-snippets)
           (lsp-mode . yas-minor-mode-on)))
#+END_SRC
*** Java
Add more snippets for Java.
#+BEGIN_SRC emacs-lisp
  (use-package java-snippets
    :ensure t
    :after yasnippet-snippets)
#+END_SRC
Use the lsp package for Java
#+begin_src emacs-lisp
  (use-package lsp-java
    :ensure t
    :after lsp)
#+end_src
*** JavaScript
Use a tab stop of 2.
#+BEGIN_SRC emacs-lisp
  (setq js-indent-level 2)
#+END_SRC
*** Typescript
Use typescript mode
#+begin_src emacs-lisp
  (use-package typescript-mode
    :ensure t
    :mode "\\.tsx?\\'")
#+end_src
*** C++
Use clang to format C++ buffers.
#+BEGIN_SRC emacs-lisp
  (defun c++format ()
    "Format a c++ buffer using clang-format."
    (interactive)
    (shell-command-on-region
     (point-min) (point-max)
     "clang-format" nil 'replace))
#+END_SRC
Bind it to =M-q=
And add it to =before-save-hook=.
#+BEGIN_SRC emacs-lisp
  (add-hook 'c++-mode-hook
            #'(lambda ()
                (local-set-key (kbd "M-q") #'c++format)
                (add-hook 'before-save-hook #'c++format nil 'make-it-local)))
#+END_SRC
After saving a file, run a static linter on it.
#+BEGIN_SRC emacs-lisp
  (defun c++lint ()
    "Run external linter tool on a file."
    (interactive)
    (when buffer-file-name
      (shell-command (concat "c++lint " buffer-file-name))))

  (add-hook 'c++-mode-hook
            #'(lambda ()
                (add-hook 'after-save-hook #'c++lint nil 'make-it-local)))
#+END_SRC
** Rust

   Add rust mode.  Binding clippy to =C-c C-c= and reformatting to =C-M-q=.

   #+BEGIN_SRC emacs-lisp
     (use-package rust-mode
       :ensure t
       :bind (:map rust-mode-map
                   ("C-c C-c" . rust-run-clippy)
                   ("C-M-q"   . lsp-format-buffer)))
   #+END_SRC

** Language server protocol

   Set up language server protocol with
   - =C-c C-l= as the leading key
   - no breadcrump at the top of the buffer
   - no flymake

   #+BEGIN_SRC emacs-lisp
     (use-package lsp-mode
       :ensure t
       :commands lsp
       :init (setq
              lsp-keymap-prefix "C-c C-l"
              lsp-headerline-breadcrumb-enable nil
              lsp-diagnostics-provider :none))
   #+END_SRC

** Tree-sitter
If the version supports it then use [[https://tree-sitter.github.io/tree-sitter/][tree-sitter]].
When the [[https://github.com/mickeynp/combobulate][combobulate]] git repo is present on the system then load it.
#+begin_src emacs-lisp
  (when (>= emacs-major-version 29)
    (use-package treesit
      :config
      ;; Optional, but recommended. Tree-sitter enabled major modes are
      ;; distinct from their ordinary counterparts.
      ;;
      ;; You can remap major modes with `major-mode-remap-alist'.
      ;; TODO: Note that this does *not* extend to hooks!
      ;; Make sure you migrate them also
      (dolist (mapping '((python-mode     . python-ts-mode)
                         (css-mode        . css-ts-mode)
                         ;; TODO differentiate TSX and and plain Typescript
                         (typescript-mode . tsx-ts-mode)
                         (js-mode         . js-ts-mode)
                         (css-mode        . css-ts-mode)
                         (html-mode       . html-ts-mode)
                         (java-mode       . java-ts-mode)
                         (csharp-mode     . csharp-ts-mode)
                         (yaml-mode       . yaml-ts-mode)))
        (add-to-list 'major-mode-remap-alist mapping))

      (when (file-exists-p "~/src/combobulate")
          ;; Do not forget to customize Combobulate to your liking:
          ;;
          ;;  M-x customize-group RET combobulate RET
          ;;
          (use-package combobulate
            ;; Optional, but recommended.
            ;;
            ;; You can manually enable Combobulate with `M-x
            ;; combobulate-mode'.
            :hook ((python-ts-mode . combobulate-mode)
                   (js-ts-mode . combobulate-mode)
                   (css-ts-mode . combobulate-mode)
                   (yaml-ts-mode . combobulate-mode)
                   (typescript-ts-mode . combobulate-mode)
                   (tsx-ts-mode . combobulate-mode))
            :load-path ("~/src/combobulate")))))
#+end_src
* Other
** Nix
Use nix mode for editing [[https://nixos.org/][nix]] configuration files:
#+BEGIN_SRC emacs-lisp
  (use-package nix-mode
    :ensure t
    :mode "\\.nix\\'")
#+END_SRC
** Presentations
Use the [[https://github.com/howardabrams/demo-it/][demo-it]] package to do presentations from emacs.
#+BEGIN_SRC emacs-lisp
  (use-package demo-it
    :ensure t
    :defer t)
#+END_SRC
It needs the =org-tree-slide= for presenting org files.
#+BEGIN_SRC emacs-lisp
  (use-package org-tree-slide
    :ensure t
    :after org)
#+END_SRC
** Ledger
Add ledger mode
#+BEGIN_SRC emacs-lisp
  (use-package ledger-mode
    :ensure t
    :mode "\\.ledger\\'")
#+END_SRC
** Calendar and Diary
Use the ISO format (year/month/day) for the diary.
#+BEGIN_SRC emacs-lisp
  (require 'calendar)

  (calendar-set-date-style 'iso)
#+END_SRC
Set up =C-c c= as a key binding for the calendar.
#+BEGIN_SRC emacs-lisp
  (bind-key (kbd "C-c c") #'calendar)
#+END_SRC
Since my diary is symlinked to a version controlled file we get a prompt.
Let's auto-answer that
#+BEGIN_SRC emacs-lisp
  (put 'my/answer-prompt 'lisp-indent-function 1)

  (defmacro my/answer-prompt (answer body)
    (let ((g-answer (gensym 'answer)))
      `(let ((,g-answer (cl-case ,answer
                          ((y yes) t)
                          ((n no) nil))))
         (defalias 'yes-or-no-p #'(lambda (_prompt) ,g-answer))
         (prog1 ,body
           (defalias 'yes-or-no-p #'y-or-n-p)))))

#+END_SRC
Set the starting buffer for frames to the calendar.
#+BEGIN_SRC emacs-lisp
  (setq initial-buffer-choice
        #'(lambda ()
            (my/answer-prompt 'yes
              (let ((buf (get-buffer "*Calendar*")))
                (if buf buf (progn
                              (calendar)
                              (diary-mark-entries 'redraw)
                              (get-buffer "*Calendar*")))))))
#+END_SRC
** Cron tasks
Use my =at= program from my [[https://github.com/bencef/bin][utility repository]] if available.
#+begin_src emacs-lisp
  (when (executable-find "at")
    (defun my/at (time action)
      "Perform `action' at a give time point.

  `action' is a command understandable by the `exec' system call.
  `time' is anything understandable by the `date(1)' command.

  Returns the buffer representing the background process."
      (let* ((command (car (string-split action " ")))
             (buffer (format "*cron-%s-%s*" command time))
             (script (format "at %s -- %s" time action)))
        (async-shell-command script buffer))))
#+end_src
** Rest client
Add REST client mode
#+BEGIN_SRC emacs-lisp
  (use-package restclient
    :ensure t
    :commands restclient-mode)
#+END_SRC
** Artist mode
Bind =artist-mode= to =C-c a=.
#+BEGIN_SRC emacs-lisp
  (bind-key (kbd "C-c a") #'artist-mode global-map)
#+END_SRC
** Markdown
Enable markdown mode for markdown files.
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode "\\.md\\'")
#+END_SRC
** YAML
Enable YAML mode.

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t
    :mode "\\.ya?ml\\'")
#+END_SRC
** PlantUML
Use [[https://plantuml.com/][plantUML]] to draw diagrams.

- Use the local execuatable
- Emit ascii art
- Indent with two spaces


#+BEGIN_SRC emacs-lisp
  (use-package plantuml-mode
    :ensure t
    :commands plantuml-mode
    :init
    (setq plantuml-default-exec-mode 'executable
          plantuml-executable-path "plantuml"
          plantuml-output-type "txt"
          plantuml-indent-level 2))
#+END_SRC
* Appearance
Use the =misterioso= theme on older versions
and the =modus-operandi= themes on newer versions.
#+BEGIN_SRC emacs-lisp
  (let ((theme (cond
                ((< emacs-major-version 28) 'misterioso)
                ((< emacs-major-version 30) 'modus-operandi)
                (t                          'modus-operandi-tinted))))
    (load-theme theme t)
    (enable-theme theme))
#+END_SRC
Use the [[https://rubjo.github.io/victor-mono/][Victor mono]] fonts.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Victor Mono Medium-10"))
#+END_SRC
Use ligatures if available.
#+begin_src emacs-lisp
  (when (locate-library "ligature")
    (require 'ligature)

    (use-package ligature
      :config
      ;; Enable traditional ligature support in eww-mode, if the
      ;; `variable-pitch' face supports it
      (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
      ;; Use XML-related ligatures in HTML mode
      (ligature-set-ligatures 'html-mode '("<!--" "-->" "</" "/>"))
      ;; Enable all Cascadia Code ligatures in programming modes
      (ligature-set-ligatures 'prog-mode
                              '("</" "</>" "/>" "~-" "-~" "~@"
                                "<~" "<~>" "<~~" "~>" "~~" "~~>"
                                ">=" "<=" "<!--" "##" "###" "####"
                                "|-" "-|" "|->" "<-|" ">-|" "|-<"
                                "|=" "|=>" ">-" "<-" "<--" "-->" "->" "-<"
                                ">->" ">>-" "<<-" "<->" "->>" "-<<" "<-<"
                                "==>" "=>" "=/=" "!==" "!=" "<=="
                                ">>=" "=>>" ">=>" "<=>" "<=<" "=<=" "=>=" "<<=" "=<<"
                                ".-" ".=" "=:=" "=!=" "==" "===" "::" ":=" ":>" ":<" ">:"
                                "<|" "<|>" "|>" "<>"
                                "<$" "<$>" "$>" "<+" "<+>" "+>"
                                "?=" "/=" "/==" "__" "&&" "++" "+++"))
      ;; Enables ligature checks globally in all buffers. You can also do it
      ;; per mode with `ligature-mode'.
      (global-ligature-mode t)))
#+end_src
* Prepare for interactive use
Reset =GC= treshold
#+begin_src emacs-lisp
  (setq gc-cons-threshold init/old-gc-treshold)
#+end_src
