#+TITLE: Emacs config
#+AUTHOR: Bence Fabian
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes

* Packages
Disclaimer about editing the configuration.
#+BEGIN_SRC emacs-lisp
  ;;;; init. el
  ;;;;
  ;;;; This is a generated file. DO NOT EDIT IT.
  ;;;; Edit `emacs.org' and use `org-babel-tangle'
  ;;;; The default hotkey is C-c C-v t
#+END_SRC
** Set up package repositories
- Require the functions to handle packages
- Add repos to make available all packages
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (let ((archives '(("melpa"     . "http://melpa.org/packages/")
                    ("gnu"       . "http://elpa.gnu.org/packages/"))))
    (dolist (archive archives)
      (add-to-list 'package-archives archive)))
  (package-initialize)
#+END_SRC
** Set up use-package
If not installed yet, then install ~use-package~.
This is useful when migrating to a new computer.
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC
Require it only for expansion time.
Bind-key will be used in package configs.
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (require 'use-package))
  (require 'bind-key)
#+END_SRC
* General
Mostly lifted from the better defaults package unless otherwise stated.
** UI
Disable menu, toolbar and scrollbars.
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
  (when (fboundp 'horizontal-scroll-bar-mode)
    (horizontal-scroll-bar-mode -1))
#+END_SRC
Play nice with system clipboard.
#+BEGIN_SRC emacs-lisp
  (setq save-interprogram-paste-before-kill t
        mouse-yank-at-point t)
#+END_SRC
Show matching parens
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC
Don't create new frame for =ediff=
#+BEGIN_SRC emacs-lisp
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+END_SRC
Change yes/no prompts to y/n prompts
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
Enable narrowing
#+BEGIN_SRC emacs-lisp
  (put 'narrow-to-region 'disabled nil)
#+END_SRC
*** Moving around
Use =ace-window= for window navigation instead of =other-window=.
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :bind (("C-x o" . ace-window))
    ;; Emacs 25 compatibility hack
    ;; TODO: remove when all deploys are at 26.
    :config (unless (functionp 'frame-parent)
              (fset 'frame-parent #'(lambda (arg) nil))))
#+END_SRC
Use =avy= to move around.  Use =M-g= as a leader which already has
=goto-line= and =goto-char=.
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind (;; Word jumping
           ("M-g w" . avy-goto-word-1)
           ("M-g M-b" . avy-goto-word-1-above)
           ("M-g M-f" . avy-goto-word-1-below)
           ;; Line jumping
           ("M-g l" . avy-goto-line)))
#+END_SRC
*** Completion
Use ivy/swiper/counsel for completion
#+BEGIN_SRC emacs-lisp :noweb yes
  (use-package counsel
    :ensure t
    :bind (
           <<bindings>>
           )
    :init
    (setq completing-read-function 'ivy-completing-read))
#+END_SRC
Replace =isearch= with =swiper=
#+BEGIN_SRC emacs-lisp :noweb-ref bindings :tangle no
  ("C-s" . swiper)
#+END_SRC
Use the counsel version of =M-x=
#+BEGIN_SRC emacs-lisp :noweb-ref bindings :tangle no
  ("M-x" . counsel-M-x)
#+END_SRC
Use counsel for file and buffer search
#+BEGIN_SRC emacs-lisp :noweb-ref bindings :tangle no
  ("C-x C-f" . counsel-find-file)
  ("C-x b"   . ivy-switch-buffer)
#+END_SRC
Use counsel for help functionality
#+BEGIN_SRC emacs-lisp :noweb-ref bindings :tangle no
  ("C-h f" . counsel-describe-function)
  ("C-h v" . counsel-describe-variable)
#+END_SRC
Use counsel for entering unicode glyphs
#+BEGIN_SRC emacs-lisp :noweb-ref bindings :tangle no
  ("C-c u" . counsel-unicode-char)
#+END_SRC
Use ivy-hydra for different actions with =C-o=
#+BEGIN_SRC emacs-lisp
  (use-package ivy-hydra :ensure t)
#+END_SRC
** Editing
Indent with spaces.
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC
Require newline at end of file.
#+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
#+END_SRC
Delete trailing whitespace before saving.
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook #'delete-trailing-whitespace)
#+END_SRC
Don't create lock files.  I never needed it and it drives the nodejs file watcher crazy.
#+begin_src emacs-lisp
  (setq create-lockfiles nil)
#+end_src
*** Default multi-language input method
Most of the time it is the easter european input for Hungarian / Polish.

Other ones still can be chosen with a universal argument (=C-u=).
#+BEGIN_SRC emacs-lisp
  (setq default-input-method "latin-2-alt-postfix")
#+END_SRC
*** Multiple cursors
Possibly use multiple cursors for editing.
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :bind (("C-c m a" . mc/mark-all-dwim)                ;; All
           ("C-c m b" . mc/edit-beginnings-of-lines)     ;; Beginning
           ("C-c m e" . mc/edit-ends-of-lines)           ;; End
           ("C-c m m" . mc/mark-more-like-this-extended) ;; More
           ("C-c m n" . mc/insert-numbers)               ;; Numbers
           ))
#+END_SRC
*** Chromium edit with emacs
Set up the emacs side of the [[https://github.com/stsquad/emacs_chrome][Edit with emacs]] chrome/ium plugin.

Add to emacs search path.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/lib/emacs/")
#+END_SRC
If emacs is running in daemon mode and the library is downloaded,
then start the edit server.
#+BEGIN_SRC emacs-lisp
  (when (and (daemonp) (locate-library "edit-server"))
    (require 'edit-server)
    (edit-server-start))
#+END_SRC
** File handling
*** Dired
Enable changing the buffer to the visited file by pressing =a=.
#+BEGIN_SRC emacs-lisp
  (put 'dired-find-alternate-file 'disabled nil)
#+END_SRC
Move files to trash on deletion
#+BEGIN_SRC emacs-lisp
  (setq delete-by-moving-to-trash t)
#+END_SRC
Install `trashed` to manage the contents of the trash from emacs.
#+begin_src emacs-lisp
  (use-package trashed
    :ensure t)
#+end_src
Bind =C-x C-d= to =dired= instead of =list-directory=.
#+BEGIN_SRC emacs-lisp
  (bind-key (kbd "C-x C-d") #'dired)
#+END_SRC
Hide details by default.
#+BEGIN_SRC emacs-lisp
  (add-hook 'dired-mode-hook #'dired-hide-details-mode 'append (not 'local))
#+END_SRC
Enable multi-panel file operations by turning on "Do what I mean"
mode.
#+BEGIN_SRC emacs-lisp
  (setq dired-dwim-target t)
#+END_SRC
*** TRAMP
Make =ssh= the default connection method.
#+BEGIN_SRC emacs-lisp
  (setq tramp-default-method "ssh")
#+END_SRC
** Backup Directory
Snippets taken from https://www.emacswiki.org/emacs/BackupDirectory

Define a dir where emacs can put all the backups
#+BEGIN_SRC emacs-lisp  :noweb tangle
  (eval-when-compile
    (require 'cl-lib))

  (let ((backup-dir "~/.backups/"))
    <<set-up-backups>>
    <<set-up-autosave>>
    <<clean-up-backups>>)
#+END_SRC
*** Set up backups
- Backup by copying
- Don't backup TRAMP files
- keep 6 of the newest versions
- keep 2 of the oldest versions
#+BEGIN_SRC emacs-lisp :noweb-ref set-up-backups :tangle no
  (setq backup-by-copying t
        backup-directory-alist `((,tramp-file-name-regexp . nil)
                                 ("."                     . ,backup-dir))
        delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)
#+END_SRC
*** Clean up backups
Clean any backup that is older than a week
#+BEGIN_SRC emacs-lisp :noweb-ref clean-up-backups :tangle no
  (message "Deleting old backup files...")
  (let ((week (* 60 60 24 7))
        (current (float-time (current-time))))
    (cl-dolist (file (directory-files backup-dir t))
      (when (and (backup-file-name-p file)
                 (> (- current (float-time (cl-fifth (file-attributes file))))
                    week))
        (message "%s" file)
        (delete-file file))))
#+END_SRC
*** Auto-save files
Save the auto-saves there too.
#+BEGIN_SRC emacs-lisp :noweb-ref set-up-autosave :tangle no
  (setq auto-save-file-name-transforms
        `((".*" ,backup-dir t)))
  (setq auto-save-list-file-prefix
        backup-dir)
#+END_SRC
* Org
Use htmlize to add syntax highlighting to org exported code blocks.
#+BEGIN_SRC emacs-lisp
  (use-package htmlize :ensure t)
#+END_SRC
** Markdown export
Make the markdown export use the backtick syntax for exporting code
blocks.  The deault one exports only with indentation.

Using the backtick syntax makes it possible to syntax highlight
code blocks properly.

Create a function to export with the backtick rule.
#+BEGIN_SRC emacs-lisp
  (defun my/md-backtick-src-block (src-block contents info)
    "Print code blocks with the backtick syntax so they can be
  highlighted appropriately.  The CONTENTS parameter is empty."
    (format (concat "```%s\n"
                    "%s"
                    "```\n")
            (org-element-property :language src-block)
            (org-remove-indentation
             (org-export-format-code-default src-block info))))
#+END_SRC
Register the new export mode which uses our function.  Derive it
from the default markdown mode =md=.
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure nil
    :defer t
    :init
    (autoload #'org-export-define-derived-backend "ox")
    :config
    (progn
      (require 'ox-md)
      (require 'org-tempo)
      (org-export-define-derived-backend
       'md-backtick 'md
       :translate-alist '((src-block . my/md-backtick-src-block)))))
#+END_SRC
Create an interactive function so we can use our new export
functionality from the =M-x= menu or from a key binding.
#+BEGIN_SRC emacs-lisp
  (defun org-export-md-backtick-to-buffer ()
      "Export the current org mode buffer as Markdown with code
  blocks exported with the backtick syntax."
    (interactive)
    (org-export-to-buffer 'md-backtick "*MD Bactick Export*"))
#+END_SRC
* Git
Install magit and set =C-c g= to =magit-status=
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-c g" . magit-status)
           ("C-c b" . magit-blame)))
#+END_SRC
* Programming
** Lisp
Will need paredit for all lisps.
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t
    :commands enable-paredit-mode
    :init
    (let ((lisp-mode-hooks '(emacs-lisp-mode-hook
                             lisp-mode-hook
                             clojure-mode-hook
                             cider-repl-mode-hook
                             ;; racket-mode-hook
                             scheme-mode-hook
                             slime-repl-mode-hook
                             eval-expression-minibuffer-setup-hook
                             lisp-interaction-mode)))
      (dolist (mode-hook lisp-mode-hooks)
        (add-hook mode-hook 'paredit-mode))))
#+END_SRC
** JavaScript
Use a tab stop of 2.
#+BEGIN_SRC emacs-lisp
  (setq js-indent-level 2)
#+END_SRC

** Rust

   Add rust mode.

   #+BEGIN_SRC emacs-lisp
     (use-package rust-mode
       :ensure t)
   #+END_SRC

** TODO Language server protocol

   Look into how to set it up.

* Other
** Calendar and Diary
Use the ISO format (year/month/day) for the diary.
#+BEGIN_SRC emacs-lisp
  (calendar-set-date-style 'iso)
#+END_SRC
Set up =C-c c= as a key binding for the calendar.
#+BEGIN_SRC emacs-lisp
  (bind-key (kbd "C-c c") #'calendar)
#+END_SRC
Set the starting buffer for frames to the calendar.
#+BEGIN_SRC emacs-lisp
  (setq initial-buffer-choice
        #'(lambda ()
            (let ((buf (get-buffer "*Calendar*")))
              (if buf buf (progn
                            (calendar)
                            (diary-mark-entries 'redraw)
                            (get-buffer "*Calendar*"))))))
#+END_SRC
** Rest client
Add REST client mode
#+BEGIN_SRC emacs-lisp
  (use-package restclient :ensure t)
#+END_SRC
** Artist mode
Bind =artist-mode= to =C-c a=.
#+BEGIN_SRC emacs-lisp
  (bind-key (kbd "C-c a") #'artist-mode global-map)
#+END_SRC
** Markdown
Enable markdown mode for markdown files.
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode)))
#+END_SRC
* Appearance
Use the =tango-dark= theme
** YAML
Enable YAML mode.

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode :ensure t)
#+END_SRC
** PlantUML
Use [[https://plantuml.com/][plantUML]] to draw diagrams.

- Use the local execuatable
- Emit ascii art
- Indent with two spaces

#+BEGIN_SRC emacs-lisp
  (load-theme 'tango-dark t)
#+END_SRC
Use a bar for the cursor.  We are not in the 70s.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(cursor-type . bar))
#+END_SRC
Set default transparency for maximum hacker street cred.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(alpha . 85))
#+END_SRC
